import { type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { PlatypusGeneratedModule, PlatypusGeneratedSharedModule } from './generated/module.js';
import { PlatypusValidator, registerValidationChecks } from './platypus-validator.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type PlatypusAddedServices = {
    validation: {
        PlatypusValidator: PlatypusValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type PlatypusServices = LangiumServices & PlatypusAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const PlatypusModule: Module<PlatypusServices, PartialLangiumServices & PlatypusAddedServices> = {
    validation: {
        PlatypusValidator: () => new PlatypusValidator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createPlatypusServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Platypus: PlatypusServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        PlatypusGeneratedSharedModule
    );
    const Platypus = inject(
        createDefaultModule({ shared }),
        PlatypusGeneratedModule,
        PlatypusModule
    );
    shared.ServiceRegistry.register(Platypus);
    registerValidationChecks(Platypus);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    }
    return { shared, Platypus };
}


// import { Module, inject } from 'langium';
// import { LangiumServices, PartialLangiumServices, AbstractExecuteCommandHandler, ExecuteCommandAcceptor, DefaultSharedModuleContext, LangiumSharedServices, createDefaultSharedModule, createDefaultModule } from 'langium/lsp';
// import { parseAndGenerate } from '../web/main.js';
// import { PlatypusGeneratedModule, PlatypusGeneratedSharedModule } from './generated/module.js';
// import { PlatypusValidationRegistry, PlatypusValidator } from './platypus-validator.js';

// /**
//  * Declaration of custom services - add your own service classes here.
//  */
// export type PlatypusAddedServices = {
//     validation: {
//         PlatypusValidator: PlatypusValidator
//     }
// }

// /**
//  * Union of Langium default services and your custom services - use this as constructor parameter
//  * of custom service classes.
//  */
// export type PlatypusServices = LangiumServices & PlatypusAddedServices

// /**
//  * Dependency injection module that overrides Langium default services and contributes the
//  * declared custom services. The Langium defaults can be partially specified to override only
//  * selected services, while the custom services must be fully specified.
//  */
// export const PlatypusModule: Module<PlatypusServices, PartialLangiumServices & PlatypusAddedServices> = {
//     validation: {
//         ValidationRegistry: (services) => new PlatypusValidationRegistry(services),
//         PlatypusValidator: () => new PlatypusValidator()
//     },
// };

// class PlatypusCommandHandler extends AbstractExecuteCommandHandler {
//     registerCommands(acceptor: ExecuteCommandAcceptor): void {
//         acceptor('parseAndGenerate', args => {
//             // invoke generator on this data, and return response
//             return parseAndGenerate(args[0]);
//         });
//     }
// }

// /**
//  * Create the full set of services required by Langium.
//  *
//  * First inject the shared services by merging two modules:
//  *  - Langium default shared services
//  *  - Services generated by langium-cli
//  *
//  * Then inject the language-specific services by merging three modules:
//  *  - Langium default language-specific services
//  *  - Services generated by langium-cli
//  *  - Services specified in this file
//  *
//  * @param context Optional module context with the LSP connection
//  * @returns An object wrapping the shared services and the language-specific services
//  */
// export function createPlatypusServices(context: DefaultSharedModuleContext): {
//     shared: LangiumSharedServices,
//     Platypus: PlatypusServices
// } {
//     const shared = inject(
//         createDefaultSharedModule(context),
//         PlatypusGeneratedSharedModule
//     );
//     const Platypus = inject(
//         createDefaultModule({ shared }),
//         PlatypusGeneratedModule,
//         PlatypusModule
//     );
//     shared.lsp.ExecuteCommandHandler = new PlatypusCommandHandler();
//     shared.ServiceRegistry.register(Platypus);
//     return { shared, Platypus };
// }